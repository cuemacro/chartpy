name: Build Environment
description: "Build the environment using pyproject.toml and uv"

inputs:
  python-version:
    description: 'The Python we shall use'
    required: false
    default: '3.9'

runs:
  using: "composite"

  steps:
    - name: Checkout [${{ github.repository }}]
      uses: actions/checkout@v4

    # Install UV (Unix)
    - name: Install UV (Unix)
      if: runner.os == 'Linux' || runner.os == 'macOS'
      shell: bash
      run: |
        set -eo pipefail
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "${{ github.workspace }}/.venv/bin" >> $GITHUB_PATH

        # Ensure the venv/bin is first in the PATH
        unset PYTHONHOME  # Unset the PYTHONHOME environment variable
                          # if set to avoid any system Python fallback


      # Install UV (Windows)
    - name: Install UV (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        irm https://astral.sh/uv/install.ps1 | iex
        $uvPath = "C:\Users\runneradmin\.local\bin"
        Add-Content $env:GITHUB_PATH $uvPath

        # Modify PATH to only include the virtual environment's Scripts directory
        Add-Content $env:GITHUB_PATH ${{ github.workspace }}\.venv\Scripts

        # Unset PYTHONHOME to avoid any system Python being used
        Remove-Item -Path Env:PYTHONHOME -ErrorAction SilentlyContinue

    - name: Install pip and create venv
      shell: bash
      run: |
        # Create virtual environment with uv
        uv venv --python ${{ inputs.python-version }}

        # Ensure pip is installed and up-to-date in the virtual environment
        python -m ensurepip --upgrade

    # run if the file pyproject.toml exists
    - name: Install the dependencies
      shell: bash
      run : |
        # Sync environment (install dependencies)
        if [ -f "uv.lock" ]; then
            uv sync --all-extras --dev --frozen  # Install all dependencies (including dev dependencies)
        else
            uv sync --all-extras --dev  # Install all dependencies (including dev dependencies)
        fi
